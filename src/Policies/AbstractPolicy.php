<?php

namespace Smetaniny\ReactAdminRouting\Policies;

use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Smetaniny\ReactAdminRouting\Policies\Contracts\PolicyInterface;

/**
 * Абстрактный класс AbstractPolicy
 *
 * Этот класс реализует общую логику для всех политик доступа к моделям.
 * 
 * Он предоставляет базовые методы проверки прав на просмотр, создание, обновление
 * и удаление моделей. Другие политики могут наследовать этот класс и
 * при необходимости переопределять методы.
 */
abstract class AbstractPolicy implements PolicyInterface
{
    /**
     * Проверка, может ли пользователь видеть список всех моделей.
     *
     * По умолчанию доступ разрешен только администраторам.
     *
     * @param User $user Пользователь, для которого проверяется право
     * @return bool Возвращает true, если пользователь является администратором
     */
    public function viewAny(User $user): bool
    {
        return $user->role === 'admin';
    }

    /**
     * Проверка, может ли пользователь видеть конкретную модель.
     *
     * По умолчанию пользователь может видеть модель, если она ему принадлежит
     * или если он является администратором.
     *
     * @param User $user Пользователь, для которого проверяется право
     * @param Model $model Модель, доступ к которой проверяется
     * @return bool Возвращает true, если пользователь владеет моделью или является администратором
     */
    public function view(User $user, Model $model): bool
    {
        return $user->id === $model->user_id || $this->isAdmin($user);
    }

    /**
     * Проверка, может ли пользователь создавать новую модель.
     *
     * По умолчанию право на создание модели предоставляется пользователям с ролью "author".
     *
     * @param User $user Пользователь, для которого проверяется право
     * @return bool Возвращает true, если пользователь имеет роль "author"
     */
    public function create(User $user): bool
    {
        return $user->role === 'author';
    }

    /**
     * Проверка, может ли пользователь обновить модель.
     *
     * По умолчанию пользователь может обновить модель, если она ему принадлежит
     * или если он является администратором.
     *
     * @param User $user Пользователь, для которого проверяется право
     * @param Model $model Модель, которую пользователь хочет обновить
     * @return bool Возвращает true, если пользователь владеет моделью или является администратором
     */
    public function update(User $user, Model $model): bool
    {
        return $user->id === $model->user_id || $this->isAdmin($user);
    }

    /**
     * Проверка, может ли пользователь удалить модель.
     *
     * По умолчанию пользователь может удалить модель, если она ему принадлежит
     * или если он является администратором.
     *
     * @param User $user Пользователь, для которого проверяется право
     * @param Model $model Модель, которую пользователь хочет удалить
     * @return bool Возвращает true, если пользователь владеет моделью или является администратором
     */
    public function delete(User $user, Model $model): bool
    {
        return $user->id === $model->user_id || $this->isAdmin($user);
    }

    /**
     * Вспомогательный метод для проверки, является ли пользователь администратором.
     *
     * Этот метод используется для упрощения логики в других методах,
     * где требуется проверка прав администратора.
     *
     * @param User $user Пользователь, для которого проверяется роль
     * @return bool Возвращает true, если пользователь имеет роль "admin"
     */
    protected function isAdmin(User $user): bool
    {
        return $user->role === 'admin';
    }
}
